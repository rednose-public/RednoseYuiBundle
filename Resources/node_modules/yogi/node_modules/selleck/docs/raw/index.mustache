<a href="https://github.com/yui/selleck"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png" alt="Fork me on GitHub"></a>


<div class="intro">
<p>
Selleck is a tool for generating user documentation from <a href="http://mustache.github.com/">Mustache</a>-based templates. It was created to generate documentation for the YUI Library. At the moment this document and Selleck itself are pretty YUI-specific, but over time Selleck will become a more generic tool, and the YUI-specific parts of the workflow (and this document) will be broken out.
</p>
</div>

<h2>Requirements</h2>

<p>
Selleck requires <a href="http://nodejs.org/">Node.js</a> 0.4.0 or greater. It also requires a few third-party dependencies, but these will be installed automatically by npm.
</p>

<h2>Installation</h2>

<p>
Install Selleck using npm:
</p>

```terminal
$ npm install selleck -g
```

<p>The current stable version of Selleck is: `{{version}}`</p>

<p>
Or clone the <a href="https://github.com/yui/selleck/">GitHub repo</a> to install the latest development version:
</p>

```terminal
$ git clone git://github.com/yui/selleck.git
$ cd selleck && npm install -g
```

<h3>Running the tests</h3>

<p>Selleck tests are written in <a href="http://vowsjs.org">vows</a>.</p>

```terminal
$ git clone git://github.com/yui/selleck.git
$ cd selleck && npm install
$ npm test
```

<p>Developing with Selleck can be done easily with `npm link`.</p>

```terminal
$ git clone git://github.com/yui/selleck.git
$ cd selleck
$ sudo npm link
```

<p>After linking, you can edit the code in the repo and use the global `selleck` command on other projects for testing.</p>

<h3>Build Status</h3>

<p>Each push to Github results in a <a href="https://travis-ci.org/yui/selleck">Travis-CI</a> build.
Current build status: <img src="https://secure.travis-ci.org/yui/selleck.png">
</p>

<h2>Overview</h2>

<p>
Selleck pages are `.mustache` files that can contain HTML markup, Mustache templating tags, and Selleck-specific markup (described below).
</p>

<p>
The <a href="http://mustache.github.com/mustache.5.html">Mustache Manual</a> describes the Mustache template language. If you haven't used Mustache before, you may want to read the manual before continuing.
</p>

<h3>Projects &amp; Components</h3>

<p>
Selleck documentation typically takes the form of one top-level <strong>project</strong> with zero or more <strong>components</strong>. These are represented by directories containing various files and subdirectories that follow a few conventions.
</p>

<h4>Pages</h4>

<p>
Each project or component may have multiple <strong>pages</strong>. An <samp>index.mustache</samp> page is required, and any number of other <samp>.mustache</samp> pages may also be provided in the same directory. These will be transformed into <samp>.html</samp> files in the generated output.
</p>

<h4>Partials &amp; Layouts</h4>

<p>
<strong>Partials</strong> and <strong>layouts</strong> are special Mustache templates that live in the <samp>partials/</samp> and <samp>layouts/</samp> directories under a project or component directory.
</p>

<p>
A partial can be included in any page simply by referring to it by name using a special Mustache tag. For example, the tag <code>&#123;{&gt;footer}}</code> would include a partial named <samp>footer.mustache</samp>.
</p>

<p>
A layout is like a wrapper for other pages. A layout named <samp>main.mustache</samp> will be used by default to wrap all pages, if it exists. A layout named <samp>component.mustache</samp> will be used to wrap all component pages; if no component layout exists, then component pages will use the main layout. Inside the layout, the special partial tag <code>&#123;{>layout_content}}</code> will be replaced with the page content.
</p>

<p>
Components will automatically inherit any available partials and layouts from their parent project. If both a project and a component have a partial or layout with the same name, the component's will take precedence at the component level, while the project's will take precedence at the project level.
</p>

<h4>Metadata</h4>

<p>
Projects and components have <strong>metadata</strong> files (<samp>project.json</samp> for projects, <samp>component.json</samp> for components) containing data that will be made available to page templates.

<p>
Project metadata files must contain a `projectName` property, and component metadata files must contain a `name` property; otherwise, the contents of these files are freeform. You can use these files to provide data to your templates, which you can then refer to using Mustache tags like <code>&#123;{projectName}}</code>.
</p>

<h5>`project.json` sample</h5>

```
{
    "projectName": "YUI 3",
    "yuiVersion" : "3.3.0",
    "yuiSeedUrl" : "http://yui.yahooapis.com/combo?3.3.0/build/yui/yui-min.js&3.3.0/build/loader/loader-min.js"
}
```

<h5>`component.json` sample</h5>

```
{
    "name"       : "autocomplete",
    "displayName": "AutoComplete",
    "description": "Provides automatic input completion or suggestions for text input fields and textareas.",
    "author"     : "rgrove",

    "tags": ["widget", "autocomplete"],
    "use" : ["autocomplete"]
}
```

{{!TODO: Document additional metadata functionality like "examples" and "pages".}}

<h4>Static Assets</h4>

<p>
Finally, projects and components may provide an <samp>assets/</samp> directory containing static <strong>assets</strong> such as CSS and JavaScript. The assets directory will be copied directly to the output folder for the project or component in question, so its assets can be referenced via relative URLs.
</p>

<h3>Directory Structure</h3>

<p>
The following table describes the required and optional contents and structure of a project or component documentation directory.
</p>

<table>
<thead>
    <tr>
    <th>File/Directory</th>
    <th>Description</th>
    </tr>
</thead>

<tbody>
    <tr>
    <td><samp>assets/</samp></td>
    <td>
        <p>
        <i>Optional</i>. Directory containing static assets (such as images, JavaScript, and CSS) used by the documentation. This directory and its contents will be copied to the output directory. If an <samp>assets/</samp> directory already exists under the output directory, it will be deleted to make way for the new one.
        </p>

        <p>
        Component assets are copied to subdirectories of the main assets directory, named according to the value of the `name` property in the component's metadata.
        </p>
    </td>
    </tr>

    <tr>
    <td><samp>layouts/</samp></td>
    <td>
        <p>
        <i>Optional</i>. Directory containing layouts. A layout is a template that will be wrapped around other pages. A layout named <samp>main.mustache</samp> will be used for all pages, while a layout named <samp>component.mustache</samp> will be used for components (components will fall back to <samp>main.mustache</samp> if <samp>component.mustache</samp> is not found). Inside a layout, the tag <code>&#123;{>layout_content}}</code> will be replaced with page content.
        </p>
    </td>
    </tr>

    <tr>
    <td><samp>partials/</samp></td>
    <td>
        <p>
        <i>Optional</i>. Directory containing partials. A partial is a <samp>.mustache</samp> file that can be included in another documentation page using a directive like <code>&#123;{>partial-name}}</code>, where `partial-name` is the name (minus extension) of the partial file (e.g. <samp><i>partial-name</i>.mustache</samp>).
        </p>
    </td>
    </tr>

    <tr>
    <td><samp>component.json</samp></td>
    <td>
        <p>
        <strong>Required for components.</strong> JSON file containing metadata which will be made available to documentation templates.
        </p>

        <p>
        The metadata is freeform, but must contain at least a `name` property which contains the name of the component. This name will be used as the name of the component's output directory, among other things.
    </td>
    </tr>

    <tr>
    <td><samp>project.json</samp></td>
    <td>
    <p>
    <strong>Required for projects</strong>. Works just like component metadata; the only difference is that the project metadata must contain a `projectName` property.
    </p>
    </td>
    </tr>

    <tr>
    <td><samp>index.mustache</samp></td>
    <td>
    <p>
    <strong>Required.</strong> Main Mustache template for the project or component. This will be parsed and generated as <samp>index.html</samp> in the output directory.
    </p>
    </td>
    </tr>
</tbody>
</table>

<p>
In addition to the files listed here, the documentation directory may contain any number of <samp>.mustache</samp> files. These will be parsed and generated as <samp>.html</samp> files in the output directory.
</p>

<h3>Automatic Table of Contents Generation</h3>

<p>
If a Selleck template includes the placeholder <code>&#123;{toc}}</code>, Selleck will automatically parse HTML headings at level 2 and up (`<h2>`, `<h3>`, etc.) in the page and will replace the <code>&#123;{toc}}</code> placeholder with a generated table of contents. The table of contents on this very page was generated this way.
</p>

<p>
Headings that don't already have `id` attributes will be given generated ids based on the heading text, so `<h2>Sample Heading</h2>` would become `<h2 id="sample-heading">Sample Heading</h2>`.
</p>

<p>
To exclude a heading from the table of contents, add the class name `no-toc`, like this:
</p>

```
<h2 class="no-toc">Secret Heading</h2>
```

<h2>Markup Reference</h2>

<p>
In addition to Mustache templating tags, Selleck provides some markup syntax of its own to make things like escaping code blocks and creating links easier. The following markup is supported in all Selleck pages, layouts, and partials.
</p>

<table>
<thead>
    <tr>
    <th style="width: 90px">Name</th>
    <th>Example</th>
    <th>Description</th>
    </tr>
</thead>
<tbody>
    <tr>
    <td>Code block</td>
    <td>
        ```nohighlight
        \```
        YUI().use('node', function (Y) {
          // Sample code
        });
        \```
        ```
    </td>
    <td>
        <p>
        Three backticks on a line by themselves indicate the beginning or end of a block of code. Text inside the block will be HTML-escaped, syntax-highlighted, and wrapped in a `<pre>` tag.
        </p>

        <p>
        The wrapped text is automatically unindented to match the indentation level of the first line, so you're free to indent the containing block itself however you want.
        </p>

        <p>
        You may optionally explicitly specify a language to use for the syntax highlighting immediately after the opening triple-backticks. For example: `\`\`\`handlebars`
        </p>
    </td>
    </tr>

    <tr>
    <td>Code (inline)</td>
    <td>
        ```nohighlight
        `<code>`
        ```
    </td>
    <td>
        <p>
        Text between `\`` characters is HTML-escaped and then wrapped in `<code>` tags. To output a literal `\`` character, escape it with a backslash: `\\``
        </p>
    </td>
    </tr>

    <tr>
    <td>Link (internal)</td>
    <td>
        ```nohighlight
        \[[#Heading Name]]
        \[[#Heading Name|Optional Link Text]]
        ```
    </td>
    <td>
        <p>
        Creates a link to the specified heading (where `Heading Name` is the text inside a heading tag somewhere on the page, such as `<h2>Heading Name</h2>`).
        </p>

        <p>
        By default, the heading name is used as the link text. If optional custom link text is provided, that will be used instead.
        </p>
    </td>
    </tr>

    <tr>
    <td>Literal delimiters</td>
    <td>
        ```nohighlight
        \\{{foo\\}}
        ```
    </td>
    <td>
        <p>
        Escape a Mustache left or right delimiter with a <code>\</code> to tell Selleck it should output the delimiter characters as is rather than treating them as Mustache delimiters. This is particularly useful when writing documentation about Mustache in Mustache!
        </p>
    </td>
    </tr>

    <tr>
    <td>Preformatted block (no highlighting)</td>
    <td>
        ```nohighlight
        \```nohighlight
        This is just a normal preformatted
        text block with no highlighting.
        \```
        ```
    </td>
    <td>
        <p>
        Just like a code block, but without any syntax highlighting.
        </p>
    </td>
    </tr>

    <tr>
    <td>Terminal block</td>
    <td>
        ```nohighlight
        \```terminal
        $ sudo -i
        # rm -rf /
        \```
        ```
    </td>
    <td>
        <p>
        Like a code block, but for displaying sample input and output for a command line terminal. Shell
        prompts at the beginnings of lines (`$` or `#`) will be made non-selectable for easier copying and
        pasting.
        </p>
    </td>
    </tr>
</tbody>
</table>

<h2>Command Line Usage</h2>

<p>
After installation, you'll have a new command line application named <kbd>selleck</kbd>. Run <kbd>selleck -h</kbd> for a summary of the options Selleck supports.
</p>

<p>
If no options are given, Selleck will search the current directory and all its subdirectories recursively, looking for documentation directories (it does this by searching for <samp>project.json</samp> and <samp>component.json</samp> files). It will generate HTML documentation from all the doc directories it finds, and will write the generated docs to <samp>./docs</samp> by default.
</p>

```terminal
$ cd ~/src/yui/yui3
$ selleck
[info] Generating project docs for /Users/rgrove/src/yui/yui3/src/common/docs
[info] Generating component docs for /Users/rgrove/src/yui/yui3/src/autocomplete/docs
[info] Generating component docs for /Users/rgrove/src/yui/yui3/src/history/docs
[info] Done! Docs were written to: ./docs
```

<p>
To generate documentation from a directory other than the current directory, pass the directory as an argument.
</p>

```terminal
$ selleck ~/src/yui/yui3
```

<p>
You may also optionally specify an output directory for the generated docs.
</p>

```terminal
$ selleck ~/src/yui/yui3 --out ~/src/yui/yui3/docs
```

<p>
To specify a documentation theme other than Selleck's default theme, use the <kbd>--theme</kbd> option/
</p>

```terminal
$ selleck ~/src/yui/yui3 --theme /path/to/theme
```

<p>
To generate documentation for an explicit project rather than searching for the project, use the <samp>--project</samp> option.
</p>

```terminal
$ selleck --project /path/to/project
```

<p>
Finally, the <samp>--server</samp> option will start a web server that you can use to preview your documentation in real time as you make changes, so that you don't need to regenerate after every change. It can be used in combination with any of the other options.
</p>

```terminal
$ selleck ~/src/yui/yui3 --server
[info] Selleck is now giving Ferrari rides at http://localhost:3000
```

<h2>Other Stuff</h2>

<p>
Selleck isn't finished yet, and there's still more to document here. For now, poke around the default template and some of the component doc directories in the <a href="https://github.com/yui/yui3/">YUI 3 source tree</a> to see what's possible.
</p>

<h2>License</h2>

<p>
Copyright &copy; 2011 Yahoo! Inc.<br>
All rights reserved.
</p>

<p>
Redistribution and use of this software in source and binary forms, with or
without modification, are permitted provided that the following conditions are
met:
</p>

<ul>
  <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>
  <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>
  <li>Neither the name of Yahoo! Inc. nor the names of Selleck's contributors may be used to endorse or promote products derived from this software without specific prior written permission of Yahoo! Inc.</li>
</ul>

<p>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
</p>
